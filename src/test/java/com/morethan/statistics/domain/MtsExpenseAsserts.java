package com.morethan.statistics.domain;

import static com.morethan.statistics.domain.AssertUtils.bigDecimalCompareTo;
import static com.morethan.statistics.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MtsExpenseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsExpenseAllPropertiesEquals(MtsExpense expected, MtsExpense actual) {
        assertMtsExpenseAutoGeneratedPropertiesEquals(expected, actual);
        assertMtsExpenseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsExpenseAllUpdatablePropertiesEquals(MtsExpense expected, MtsExpense actual) {
        assertMtsExpenseUpdatableFieldsEquals(expected, actual);
        assertMtsExpenseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsExpenseAutoGeneratedPropertiesEquals(MtsExpense expected, MtsExpense actual) {
        assertThat(expected)
            .as("Verify MtsExpense auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsExpenseUpdatableFieldsEquals(MtsExpense expected, MtsExpense actual) {
        assertThat(expected)
            .as("Verify MtsExpense relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getExpenseDate())
                        .as("check expenseDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getExpenseDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getExpenseAmount())
                        .as("check expenseAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getExpenseAmount())
            )
            .satisfies(e -> assertThat(e.getExpenseType()).as("check expenseType").isEqualTo(actual.getExpenseType()))
            .satisfies(e -> assertThat(e.getExpenseTypeDetail()).as("check expenseTypeDetail").isEqualTo(actual.getExpenseTypeDetail()))
            .satisfies(e -> assertThat(e.getExpensePayer()).as("check expensePayer").isEqualTo(actual.getExpensePayer()))
            .satisfies(e -> assertThat(e.getExpenseReceiver()).as("check expenseReceiver").isEqualTo(actual.getExpenseReceiver()))
            .satisfies(e -> assertThat(e.getExpenseRemark()).as("check expenseRemark").isEqualTo(actual.getExpenseRemark()))
            .satisfies(e -> assertThat(e.getExpenseReceipt()).as("check expenseReceipt").isEqualTo(actual.getExpenseReceipt()))
            .satisfies(
                e ->
                    assertThat(e.getExpenseReceiptContentType())
                        .as("check expenseReceipt contenty type")
                        .isEqualTo(actual.getExpenseReceiptContentType())
            )
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getModifier()).as("check modifier").isEqualTo(actual.getModifier()))
            .satisfies(
                e ->
                    assertThat(e.getModifyDatetime())
                        .as("check modifyDatetime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getModifyDatetime())
            )
            .satisfies(e -> assertThat(e.getCreator()).as("check creator").isEqualTo(actual.getCreator()))
            .satisfies(
                e ->
                    assertThat(e.getCreateDatetime())
                        .as("check createDatetime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreateDatetime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsExpenseUpdatableRelationshipsEquals(MtsExpense expected, MtsExpense actual) {}
}
