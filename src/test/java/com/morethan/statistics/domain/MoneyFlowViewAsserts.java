package com.morethan.statistics.domain;

import static com.morethan.statistics.domain.AssertUtils.bigDecimalCompareTo;
import static com.morethan.statistics.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MoneyFlowViewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyFlowViewAllPropertiesEquals(MoneyFlowView expected, MoneyFlowView actual) {
        assertMoneyFlowViewAutoGeneratedPropertiesEquals(expected, actual);
        assertMoneyFlowViewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyFlowViewAllUpdatablePropertiesEquals(MoneyFlowView expected, MoneyFlowView actual) {
        assertMoneyFlowViewUpdatableFieldsEquals(expected, actual);
        assertMoneyFlowViewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyFlowViewAutoGeneratedPropertiesEquals(MoneyFlowView expected, MoneyFlowView actual) {
        assertThat(expected)
            .as("Verify MoneyFlowView auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyFlowViewUpdatableFieldsEquals(MoneyFlowView expected, MoneyFlowView actual) {
        assertThat(expected)
            .as("Verify MoneyFlowView relevant properties")
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getBusinessId()).as("check businessId").isEqualTo(actual.getBusinessId()))
            .satisfies(
                e ->
                    assertThat(e.getBusinessDate())
                        .as("check businessDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getBusinessDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getBusinessAmt())
                        .as("check businessAmt")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBusinessAmt())
            )
            .satisfies(e -> assertThat(e.getBusinessType()).as("check businessType").isEqualTo(actual.getBusinessType()))
            .satisfies(e -> assertThat(e.getBusinessTypeDetail()).as("check businessTypeDetail").isEqualTo(actual.getBusinessTypeDetail()))
            .satisfies(e -> assertThat(e.getPayer()).as("check payer").isEqualTo(actual.getPayer()))
            .satisfies(e -> assertThat(e.getReceiver()).as("check receiver").isEqualTo(actual.getReceiver()))
            .satisfies(e -> assertThat(e.getRemark()).as("check remark").isEqualTo(actual.getRemark()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoneyFlowViewUpdatableRelationshipsEquals(MoneyFlowView expected, MoneyFlowView actual) {}
}
