package com.morethan.statistics.domain;

import static com.morethan.statistics.domain.AssertUtils.bigDecimalCompareTo;
import static com.morethan.statistics.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MtsIncomeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsIncomeAllPropertiesEquals(MtsIncome expected, MtsIncome actual) {
        assertMtsIncomeAutoGeneratedPropertiesEquals(expected, actual);
        assertMtsIncomeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsIncomeAllUpdatablePropertiesEquals(MtsIncome expected, MtsIncome actual) {
        assertMtsIncomeUpdatableFieldsEquals(expected, actual);
        assertMtsIncomeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsIncomeAutoGeneratedPropertiesEquals(MtsIncome expected, MtsIncome actual) {
        assertThat(expected)
            .as("Verify MtsIncome auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsIncomeUpdatableFieldsEquals(MtsIncome expected, MtsIncome actual) {
        assertThat(expected)
            .as("Verify MtsIncome relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getIncomeDate())
                        .as("check incomeDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getIncomeDate())
            )
            .satisfies(
                e ->
                    assertThat(e.getIncomeAmount())
                        .as("check incomeAmount")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getIncomeAmount())
            )
            .satisfies(e -> assertThat(e.getIncomeType()).as("check incomeType").isEqualTo(actual.getIncomeType()))
            .satisfies(e -> assertThat(e.getIncomeTypeDetail()).as("check incomeTypeDetail").isEqualTo(actual.getIncomeTypeDetail()))
            .satisfies(e -> assertThat(e.getIncomePayer()).as("check incomePayer").isEqualTo(actual.getIncomePayer()))
            .satisfies(e -> assertThat(e.getIncomeReceiver()).as("check incomeReceiver").isEqualTo(actual.getIncomeReceiver()))
            .satisfies(e -> assertThat(e.getIncomeRemark()).as("check incomeRemark").isEqualTo(actual.getIncomeRemark()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getModifier()).as("check modifier").isEqualTo(actual.getModifier()))
            .satisfies(
                e ->
                    assertThat(e.getModifyDatetime())
                        .as("check modifyDatetime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getModifyDatetime())
            )
            .satisfies(e -> assertThat(e.getCreator()).as("check creator").isEqualTo(actual.getCreator()))
            .satisfies(
                e ->
                    assertThat(e.getCreateDatetime())
                        .as("check createDatetime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreateDatetime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMtsIncomeUpdatableRelationshipsEquals(MtsIncome expected, MtsIncome actual) {}
}
