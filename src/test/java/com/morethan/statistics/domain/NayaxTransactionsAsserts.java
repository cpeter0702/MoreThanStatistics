package com.morethan.statistics.domain;

import static com.morethan.statistics.domain.AssertUtils.bigDecimalCompareTo;
import static com.morethan.statistics.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class NayaxTransactionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNayaxTransactionsAllPropertiesEquals(NayaxTransactions expected, NayaxTransactions actual) {
        assertNayaxTransactionsAutoGeneratedPropertiesEquals(expected, actual);
        assertNayaxTransactionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNayaxTransactionsAllUpdatablePropertiesEquals(NayaxTransactions expected, NayaxTransactions actual) {
        assertNayaxTransactionsUpdatableFieldsEquals(expected, actual);
        assertNayaxTransactionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNayaxTransactionsAutoGeneratedPropertiesEquals(NayaxTransactions expected, NayaxTransactions actual) {
        assertThat(expected)
            .as("Verify NayaxTransactions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNayaxTransactionsUpdatableFieldsEquals(NayaxTransactions expected, NayaxTransactions actual) {
        assertThat(expected)
            .as("Verify NayaxTransactions relevant properties")
            .satisfies(e -> assertThat(e.getSiteID()).as("check siteID").isEqualTo(actual.getSiteID()))
            .satisfies(e -> assertThat(e.getTransactionID()).as("check transactionID").isEqualTo(actual.getTransactionID()))
            .satisfies(e -> assertThat(e.getPaymentMethodID()).as("check paymentMethodID").isEqualTo(actual.getPaymentMethodID()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getMachineName()).as("check machineName").isEqualTo(actual.getMachineName()))
            .satisfies(e -> assertThat(e.getAuthorizationValue()).as("check authorizationValue").isEqualTo(actual.getAuthorizationValue()))
            .satisfies(e -> assertThat(e.getCampaignID()).as("check campaignID").isEqualTo(actual.getCampaignID()))
            .satisfies(
                e ->
                    assertThat(e.getSettlementValue())
                        .as("check settlementValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSettlementValue())
            )
            .satisfies(
                e -> assertThat(e.getProductSelectionInfo()).as("check productSelectionInfo").isEqualTo(actual.getProductSelectionInfo())
            )
            .satisfies(e -> assertThat(e.getCardNumber()).as("check cardNumber").isEqualTo(actual.getCardNumber()))
            .satisfies(e -> assertThat(e.getAuthrizationRRN()).as("check authrizationRRN").isEqualTo(actual.getAuthrizationRRN()))
            .satisfies(
                e ->
                    assertThat(e.getMachineAuthorizationTime())
                        .as("check machineAuthorizationTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getMachineAuthorizationTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getMachineSettlementTime())
                        .as("check machineSettlementTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getMachineSettlementTime())
            )
            .satisfies(e -> assertThat(e.getCreditCardType()).as("check creditCardType").isEqualTo(actual.getCreditCardType()))
            .satisfies(e -> assertThat(e.getCardType()).as("check cardType").isEqualTo(actual.getCardType()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()))
            .satisfies(
                e -> assertThat(e.getTransactionStatusID()).as("check transactionStatusID").isEqualTo(actual.getTransactionStatusID())
            )
            .satisfies(e -> assertThat(e.getTransactionTypeID()).as("check transactionTypeID").isEqualTo(actual.getTransactionTypeID()))
            .satisfies(e -> assertThat(e.getBillingProvider()).as("check billingProvider").isEqualTo(actual.getBillingProvider()))
            .satisfies(
                e -> assertThat(e.getPrepaidCardHolderName()).as("check prepaidCardHolderName").isEqualTo(actual.getPrepaidCardHolderName())
            )
            .satisfies(e -> assertThat(e.getRefundRequestBy()).as("check refundRequestBy").isEqualTo(actual.getRefundRequestBy()))
            .satisfies(
                e ->
                    assertThat(e.getRefundRequestDate())
                        .as("check refundRequestDate")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getRefundRequestDate())
            )
            .satisfies(e -> assertThat(e.getRefundReason()).as("check refundReason").isEqualTo(actual.getRefundReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNayaxTransactionsUpdatableRelationshipsEquals(NayaxTransactions expected, NayaxTransactions actual) {}
}
